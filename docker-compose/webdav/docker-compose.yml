---
version: "3"


networks:
  backend:
    external: true 

# Hardening source: https://www.linode.com/content/hackersploit-docker-security-essentials-ebook/

# TO ADD:
# PREVENTING PRIVILEGE ESCALATION ATTACKS
# docker run --security-opt=no-new-privileges <IMAGE-ID>
# The no-new-privileges option will stop container processes from gaining any additional privileges.
# LIMITING CONTAINER CAPABILITIES
# You also can run a container with the --privileged flag, which gives it all of the kernel capability options.
#  However, this is never recommended 
# We can remove all kernel capabilities when running a container with the following options:
# docker run --cap-drop all <IMAGE-ID>
# 2. You can also add the specific kernel capabilities required by your containers by running the following command:
# docker run --cap-drop all --cap-add <CAPABILITY> <IMAGE-ID>


# inspired by https://swag.industries/simple-webdav-server-with-sftpgo-docker-and/
services:
  webdav:
    image: drakkan/sftpgo:v2.5
    container_name: webdav
    # For custom Docker user
    # build:
    #   context: "."
    #   target: "app"
    #   args:
    #     - "UID=${UID:-2000}"
    #     - "GID=${GID:-2000}"
    # user: dockeruser
    # volumes:
      # - /opt/path:/path
    user: root
    volumes:
      # - type: bind
      #   source: /path/to/my/files
      #   target: /srv/sftpgo/data/my-folder
      - type: bind
        source: ./config # This folder must be `chown -R 1000:1000`
        target: /var/lib/sftpgo
      - /mnt/myhdd:/srv/sftpgo/data/myhdd
      - ./sftpgo-config.json:/etc/sftpgo/sftpgo.json
    restart: always
    networks:
      - backend
    ### Seucrity ###
    # cap_add:
    #   - CAP_NET_ADMIN
    # security_opt:
    #   - seccomp:unconfined
    # ports:
    #   - 8090:8090
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: '512M'
    environment:
      - SFTPGO_WEBDAVD__BINDINGS__0__PORT=8090
    labels:
      # We need to route the port for webdav
      - "traefik.enable=true"
      - "traefik.http.routers.${SERVICE_NAME}.rule=Host(`${SUBDOMAIN}.${ROOT_DOMAIN}`)"
      - "traefik.http.services.${SERVICE_NAME}.loadbalancer.server.port=${PORT}"
      # - "traefik.docker.network=frontend"
      - "traefik.http.routers.${SERVICE_NAME}.tls=true"
      - traefik.http.routers.${SERVICE_NAME}.service=${SERVICE_NAME}
      # - "traefik.http.routers.${SERVICE_NAME}.middlewares=authelia@docker"
      # - "traefik.http.routers.ui_webdav.entryPoints=websecure"
      - "traefik.http.routers.ui_webdav.rule=Host(`ui-webdav.${ROOT_DOMAIN}`)"
      # - "traefik.http.routers.ui_webdav.priority=2"
      - "traefik.http.routers.ui_webdav.middlewares=authelia@docker"
      # - "traefik.http.routers.ui_webdav.tls.certresolver=your_cert_resolver"
      # - "traefik.http.routers.ui_webdav.tls.domains[0].main=ui-webdav.you.com"
      - "traefik.http.routers.ui_webdav.service=ui_webdav"
      - "traefik.http.routers.ui_webdav.tls=true"
      - "traefik.http.services.ui_webdav.loadbalancer.server.port=8080"
      # Watchtower
      # - com.centurylinklabs.watchtower.enable=true
      # scopes: autoupdate, monitor
      # - com.centurylinklabs.watchtower.scope=autoupdate