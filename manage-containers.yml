---
- name: Ad-hoc Actions for Docker Compose Containers
  hosts: local-1
  gather_facts: false
  become: yes
  vars_files:
    - vars/main.yml
    - vars/apps.yml
  ignore_errors: "{{ ansible_check_mode }}"
  
  # ansible-playbook -i inventory playbook.yml -e "t_restart=['container1', 'container2']"
  vars:
    # Restart all at once
    # t_restart: [all]  # List of containers to restart
    t_restart: []  # List of containers to restart
    t_start: []    # List of containers to start
    t_stop: []     # List of containers to stop
    t_recreate: [paperless-ngx] # List of containers to recreate



  tasks:
    # If we want to stop any old docker-compsoe services, we still need old docker-compose.yml files for them
    - name: Transfer NEW docker-compose folders to remote host (no delete)
      synchronize:
        # src: "docker-compose/docker-compose-{{ item }}"
        src: "docker-compose/"
        dest: "{{ compose_file_path }}/"
        rsync_opts:
          - "--chmod=644"
          - "--exclude=dev-*"
          - "--exclude=*.example"
        recursive: yes
        archive: no
        checksum: yes
        delete: yes
      # loop: "{{ prod_apps }}"


    - name: Set owner recursively for docker-compose folders
      file:
        path: "{{ compose_file_path }}/"
        owner: root
        group: root
        recurse: yes
        state: directory

    - name: restart ALL Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        # state: present
        state: restarted
      # when: t_restart | length > 0
      loop: "{{ prod_apps }}"
      when: "'all' in t_restart"

    - name: Restart Some Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        # state: present
        state: restarted
      when: t_restart | length > 0 and "all" not in t_restart
      loop: "{{ t_restart }}"
      # loop_control:
      #   loop_var: container

    - name: Start Some Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        state: present
      when: t_start | length > 0
      loop: "{{ t_start }}"
      # loop_control:
      #   loop_var: container

    - name: Stop Some Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        state: absent
      when: t_stop | length > 0
      loop: "{{ t_stop }}"
      # loop_control:
      #   loop_var: container

    - name: Recreate Some Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        state: present
        # nocache: true
        # restarted: true
        build: always
        recreate: always
        pull: always  # Add this line to pull the latest image before recreating
      when: t_recreate | length > 0 and "all" not in t_recreate
      loop: "{{ t_recreate }}"
      # loop_control:
      #   loop_var: container

    - name: Recreate ALL Containers
      community.docker.docker_compose_v2:
        project_src: "{{ compose_file_path }}/{{ item }}/"
        state: present
        # nocache: true
        # restarted: true
        build: always
        recreate: always
        pull: always  # Add this line to pull the latest image before recreating
      # when: t_restart | length > 0
      loop: "{{ prod_apps }}"
      when: "'all' in t_recreate"